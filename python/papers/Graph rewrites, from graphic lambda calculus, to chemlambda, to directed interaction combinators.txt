Graph rewrites, from graphic lambda calculus, to
chemlambda, to directed interaction combinators
Marius Buliga
Institute of Mathematics, Romanian Academy
P.O. BOX 1-764, RO 014700
Bucureşti, Romania
Marius.Buliga@imar.ro , mbuliga@protonmail.ch
07.07.2020
Abstract
Here I report about the modifications of and relations between graphic lambda
calculus, various formalisms which appeared under the name chemlambda and a version
of directed interaction combinators.
This is part of the study and experiments with the artificial chemistry chemlambda
and the relations with lambda calculus or interaction combinators, as described in
arXiv:2003.14332 and available from the entry page chemlambda.github.io [12].
Context
The chemlambda project context and relevant previous work are explained in Section 4
(About this project) of [4] arXiv:2003.14332 See also, for more mathematical background,
the presentation [6] Emergent rewrites in knot theory and logic.
Here I report about the modifications of the various formalisms which are related to chem-
lambda. The online varsion of this article, which will be kept up to date, is Graph rewrites,
from emergent algebras to chemlambda. See also the site of all chemlambda projects.
1 Graphic lambda calculus 1
2 Chemlambda v1 (chemical concrete machine) 7
3 Chemlambda v2 15
4 Interaction Combinators and directed interaction combinators (dirIC) 21
1 Graphic lambda calculus
Introduced in [3] arXiv:1305.5786, graphic lambda calculus has the following doupbel push-
out (DPO [15]) graph rewrites:
1
ar
X
iv
:2
00
7.
10
28
8v
1 
 [
cs
.L
O
] 
 7
 J
ul
 2
02
0
https://arxiv.org/abs/2003.14332
https://chemlambda.github.io/index.html
https://arxiv.org/abs/2003.14332
https://mbuliga.github.io/novo/presentation.html
https://mbuliga.github.io/quinegraphs/history-of-chemlambda.html
https://mbuliga.github.io/quinegraphs/history-of-chemlambda.html
https://chemlambda.github.io/index.html
https://arxiv.org/abs/1305.5786
2
3
Graphic lambda calculus does not have an algorithm of application of rewrites.
There is an algorithm for conversion of untyped lambda terms into glc graphs. Here are
two examples of reductions:
4
- reduction of the Omega combinator
- reduction of the term SKK
Graphic lambda calculus is interesting because it can also represent the graphical version
of emergent algebras via decorated tangle diagrams explained in arXiv:1103.6007. It can
therefore be used to represent and compute (reduce) differential calculus in metric spaces
endowed with dilation structures arXiv:0810.5042.
This is done via the identification of decorated crossings as
5
https://arxiv.org/abs/1103.6007
https://arxiv.org/abs/0810.5042
Another, different identification of undecorated crossings, which can be done with GLC,
uses the application and abstraction nodes
Under this identifications the equivalent of the beta rewrite in terms of tangle diagrams
becomes equivalent with the ”splice” and ”loop” graph rewrites.
6
Both these identifications apply for a notion of tangle diagrams which differs from the
usual one. Namely we use tangle diagrams which are not constrained to be planar graphs.
More precisely, here a tangle diagram is an oriented port graph in the sense of Bawden [1]
[2], with nodes which are 4-valent and oriented links. The nodes can be either undecorated,
i.e. of the two kinds of oriented crossings, or decorated, i.e. the two kinds of decorated
crossings are supplementary decorated with an element of a commutative group.
The difference from usual (oriented and with decorated crossings) tangle diagrams is that
as graphs these diagrams are not supposed to be planar. By Kuratowski theorem, a graph is
planar if it does not contain certain local patterns. In the terms of local machines explained
in [5] Alife properties of directed interaction combinators vs. chemlambda we can’t detect
with a local machine the absence of a local pattern in a graph, only the presence of it.
In joint work with L.H. Kauffman [7] arXiv:1312.4333, in section 5 Kauffman calls for a
topological version of GLC, based exclusively on manipulations of tangle diagrams.
2 Chemlambda v1 (chemical concrete machine)
Introduced in [9] arXiv:1309.6914, chemlambda v1 or the chemical concrete machine is a
modification of GLC which contains only local rewrites. It also proposes for the first time
to see the graphs as molecules and the rewrites as chemical reactions mediated by rewriting
enzymes. Beyond that, chemlambda v1 still lacks a clearly defined algorithm of rewriting.
The elements of chemlambda v1 are
7
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.5446&rep=rep1&type=pdf
https://mbuliga.github.io/quinegraphs/ic-vs-chem.html#icvschem
https://arxiv.org/abs/1312.4333
https://arxiv.org/abs/1309.6914
The graphs are called molecules and the rewrites are mediated by enzymes.
The elements of GLC as translated into chemlambda are:
8
The rewrites are:
9
10
With these rewrites we can do some lambda calculus reductions, by using the same
parsing of lambda calculus terms to (chemlambda) graphs as in GLC. For example the
ENELSE lambda term.
A rewrite which is introduced later in the article is DISENTANGLE (as a pattern it
appears later as SHUFFLE)
With this supplementary rewrite I can prove that the BCKW combinators system
11
can be implemented, in the sense that the combinators can duplicate (example here for
B)
and that all needed reductions among B,C,K,W combinators can be done (example here
for K)
12
This graph rewrite system has conflicting rewrites, but it has no algorithm of application
of rewrites. Especially the status of DISENTANGLE is unclear. This will be solved in
chemlambda v2.
The first published (in the usual ways) article which contains the name ”chemlambda”
is joint with L.H. Kauffman, in the ALIFE-14 conference, arXiv:1403.8046. Here Kauff-
man pushes again for a more topological version Kauffman’ slides [11] which mixes tangle
diagrams with chemlambda nodes, in order to be able to do computations (in the logi-
cal sense).The emergent algebras part of GLC, which is still present in chemlambda, used
such tangle diagrams manipulations for differential calculus computations, instead. In these
articles the emergent algebras aspects and interest are hidden.
Together with Kauffman, we experimented a lot with the power of chemlambda v1. Our
essays on paper were not going too far, due to the lack of a program which could make much
easier such exploration. In the background this was because of a lack of a clear rewrite
application algorithm.
During this period I became aware of the existence of chemlambda quines. See as an
example the tedious manipulation of reductions for the predecessor of a Church number
taken from this chorasimilarity post
13
https://arxiv.org/abs/1403.8046
https://mbuliga.github.io/emergent-10-years/pdf/ALIFETalk-copy.pdf
https://chorasimilarity.wordpress.com/2014/08/27/ouroboros-predecessor-iii-the-walking-machine/
Meanwhile Kauffmann started to use Mathematica for doing chemlambda v1 reductions,
14
as described in his slides [11].
He introduced the ”Arrow” 2-valent node, which is useful for easy application of several
rewrites in the same time.
3 Chemlambda v2
is an artificial chemistry, in the sense that it is a purely local graph rewrite system together
with an algorithm of applications which can be done by local machines. This notion of
artificial chemistry is proposed in [17]. See arXiv:2005.06060 for more explanations.
Motivated by the first programming essays by Kauffman for chemlambda v1, I wrote the
needed programs for chemlambda v2, in awk and html+d3.js used for visualization. The
first chemlambda project site [13] contains demonstrations made with these programs from
the github repository chemlambda-gui [14].
The latest chemlambda project site, which contains several repositories from various
contributors, is this [12]. The project received help from several contributors, or validators,
therefore now we can reduce chemlambda molecules in haskell, python or javascript, as you
can see in the more recent demonstrations.
Chemlambda can now be compared with Interaction Combinators [5] and there is a
lambda calculus to chemlambda parser and reducer [8].
The chemlambda v2 rewrites solve the problem of the curious DISENTANGLE rewrite
by introducing two fanout nodes (FO and FOE) instead of one and by a modified set of graph
rewrites. These are the following. We use the mol notation for clarity and we describe the
rewrites by giving the LHS and RHS patterns:
15
https://arxiv.org/abs/2005.06060
http://chorasimilarity.github.io/chemlambda-gui/index.html
https://github.com/chorasimilarity/chemlambda-gui/blob/gh-pages/dynamic/README.md
https://chemlambda.github.io/index.html
https://mbuliga.github.io/quinegraphs/ice.html#howto
https://mbuliga.github.io/quinegraphs/lambda2mol.html#lambdanote
16
17
18
19
and the COMB rewrites which eliminate Arrow nodes.
The DISENTANGLE rewrite is no longer needed, because it’s effect can be achieved by
the SHUFFLE move, which is a sequence of two chemlambda v2 rewrites: FO-FOE and
FI-FOE.
20
4 Interaction Combinators and directed interaction com-
binators (dirIC)
For completeness, here are the graph rewrites of Lafont’ Interaction combinators [16], as
they appear in the chemlambda v2 js programs, chemistry IC in chemistry.js:
21
https://github.com/mbuliga/quinegraphs/blob/master/js/chemistry.js
FRIN and FROUT 1-valent nodes are introduced (as in chemlambda) for the free half-
edges. We use also the Arrow 2-valent node and the COMB rewrites for eliminating them.
All LHS patterns, of chemlambda and IC, are made of two nodes connected through
their active ports. The main difference between chemlambda v2 rewrites and IC rewrites is
that several chemlambda nodes have two active ports, while IC nodes have only one active
port.
It is possible to modify the chemlambda v2 chemistry such that there are no conflicts.
We obtain a chemistry called ”dirIC”, or directed interaction combinators, explained in [5]
Alife properties of directed interaction combinators vs. chemlambda, over the same set of
nodes as chemlambda v2. With the chemistry dirIC, there is a translation between IC nodes
of Lafont to chemlambda nodes:
As argued here [5], the existence of conflicting rewrites in chemlambda v2, compared
22
https://mbuliga.github.io/quinegraphs/ic-vs-chem.html#icvschem
https://mbuliga.github.io/quinegraphs/ic-vs-chem.html#icvschem
with dirIC, creates much more interesting alife behaviours.
References
[1] A. Bawden, Connection graphs, In: Proceedings of the 1986 ACM conference on LISP
and functional programming, 258-265, ACM Press, (1986)
[2] A. Bawden, Implementing Distributed Systems Using Linear Naming, A.I. Technical
Report No. 1627, MIT, (1993)
[3] M. Buliga, Graphic lambda calculus, Complex Systems 22, 4, 311-360, (2013)
[4] M. Buliga, Artificial chemistry experiments with chemlambda, lambda calculus, inter-
action combinators, arXiv:2003.14332, (2020)
[5] M. Buliga, Artificial life properties of directed interaction combinators vs. chemlambda,
arXiv:2005.06060 (2020)
https://mbuliga.github.io/quinegraphs/ic-vs-chem.html#icvschem
[6] M. Buliga, Emergent rewrites in knot theory and logic (2020)
https://mbuliga.github.io/novo/presentation.html
[7] M. Buliga, L.H. Kauffman, GLC actors, artificial chemical connectomes, topological
issues and knots, arXiv:1312.4333, (2013)
[8] M. Buliga, Lambda calculus to chemlambda. (2019-2020),
https://mbuliga.github.io/quinegraphs/lambda2mol.html#lambdanote
[9] M. Buliga, Chemical concrete machine, Figshare, (2013), arXiv:1309.6914
[10] M. Buliga, L.H. Kauffman, Chemlambda, universality and self-multiplication, ALIFE
2014: The Fourteenth International Conference on the Synthesis and Simulation of
Living Systems July 2014, MIT Press, 490-497, (2014)
[11] L.H. Kauffman, Chemlambda, universality and self-multiplication, slides (2014)
[12] M. Buliga, Chemlambda page, https://chemlambda.github.io/index.html (2020)
[13] M. Buliga, Chemlambda project http://chorasimilarity.github.io/chemlambda-
gui/index.html (2015-2017)
[14] M. Buliga, Chemlambda-gui repository, Github (2015-2017)
https://github.com/chorasimilarity/chemlambda-gui/blob/gh-
pages/dynamic/README.md
[15] A. Corradini, U. Montanari, F. Rossi, H. Ehrig, R. Heckel, M. Loewe, Algebraic ap-
proaches to graph transformation, part I: Basic concepts and double push-out approach,
Handbook of Graph Grammars and Computing by Graph Transformation, 163-245
(1997)
[16] Y. Lafont, Interaction Combinators, Information and Computation 137, 1, 69-101,
(1997)
[17] K. Tomita, H. Kurokawa, S. Murata, Graph-rewriting automata as a natural exten-
sion of cellular automata. Chapter 14 in: Adaptive Networks, Understanding Complex
Systems, T. Gross, H. Sayama (eds.), NECSI Cambridge/Massachusetts (2009)
23
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.5446&rep=rep1&type=pdf
https://arxiv.org/abs/1305.5786
https://arxiv.org/abs/2003.14332
https://arxiv.org/abs/2003.14332
http://arxiv.org/abs/2003.14332
https://arxiv.org/abs/2005.06060
https://mbuliga.github.io/quinegraphs/ic-vs-chem.html#icvschem
https://mbuliga.github.io/novo/presentation.html
https://mbuliga.github.io/novo/presentation.html
https://arxiv.org/abs/1312.4333
https://arxiv.org/abs/1312.4333
http://arxiv.org/abs/1312.4333
https://mbuliga.github.io/quinegraphs/lambda2mol.html#lambdanote
https://mbuliga.github.io/quinegraphs/lambda2mol.html#lambdanote
http://dx.doi.org/10.6084/m9.figshare.830457
https://arxiv.org/abs/1309.6914
https://arxiv.org/abs/1403.8046
https://mbuliga.github.io/emergent-10-years/pdf/ALIFETalk-copy.pdf
https://chemlambda.github.io/index.html
http://chorasimilarity.github.io/chemlambda-gui/index.html
http://chorasimilarity.github.io/chemlambda-gui/index.html
https://github.com/chorasimilarity/chemlambda-gui/blob/gh-pages/dynamic/README.md
https://github.com/chorasimilarity/chemlambda-gui/blob/gh-pages/dynamic/README.md
https://github.com/chorasimilarity/chemlambda-gui/blob/gh-pages/dynamic/README.md
http://eprints.adm.unipi.it/1950/1/TR-96-17.ps.gz
http://eprints.adm.unipi.it/1950/1/TR-96-17.ps.gz
https://pdfs.semanticscholar.org/6cfe/09aa6e5da6ce98077b7a048cb1badd78cc76.pdf
https://link.springer.com/chapter/10.1007/978-3-642-01284-6_14
https://link.springer.com/chapter/10.1007/978-3-642-01284-6_14
	1 Graphic lambda calculus
	2 Chemlambda v1 (chemical concrete machine)
	3 Chemlambda v2
	4 Interaction Combinators and directed interaction combinators (dirIC)