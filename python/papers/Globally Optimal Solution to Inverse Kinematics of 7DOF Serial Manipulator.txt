Globally Optimal Solution to Inverse
Kinematics of 7DOF Serial Manipulator
Pavel Trutman
CIIRC CTU in Prague
Mohab Safey El Din
Sorbonne Université, LIP6 CNRS
Didier Henrion
LAAS-CNRS, FEE CTU in Prague
Tomas Pajdla
CIIRC CTU in Prague
July 27, 2020
Abstract
The Inverse Kinematics (IK) problem is to find robot control pa-
rameters to bring it into the desired position under the kinematics and
collision constraints. We present a global solution to the optimal IK
problem for a general serial 7DOF manipulator with revolute joints
and a quadratic polynomial objective function. We show that the
kinematic constraints due to rotations can all be generated by second-
degree polynomials. This is important since it significantly simplifies
further step where we find the optimal solution by Lasserre relaxations
of non-convex polynomial systems. We demonstrate that the second
relaxation is sufficient to solve the 7DOF IK problem. Our approach
is certifiably globally optimal. We demonstrate the method on the
7DOF KUKA LBR IIWA manipulator and show that we are able to
compute the optimal IK or certify in-feasibility in 99 % tested poses.
1 Introduction
The Inverse Kinematics (IK) problem is one of the most important problems
in robotics [26]. The problem is to find robot control parameters to bring it
into the desired position under the kinematics and collision constraints [13].
The IK problem has been extensively studied in robotics and control [23,
24]. The classical formulation [23] of the problem for 6 degrees of freedom
(6DOF) serial manipulators leads to solving systems of polynomial equa-
tions [4, 27]. This is in general hard (“EXPSPACE complete” [21]) algebraic
1
ar
X
iv
:2
00
7.
12
55
0v
1 
 [
cs
.R
O
] 
 2
4 
Ju
l 
20
20
-800-600-400-200 0 200400600800-800
-600
-400
-200
0
200
400
600
800
0
100
200
300
400
500
600
700
800
900
1000
x [mm]
y [mm]
z [mm]
Figure 1: (left) 7DOF serial manipulator (KUKA LBR IIWA), and (middle)
its kinematic model [15]. (right) We can optimally solve its inverse kinematics
(green) or find it infeasible (blue) in 99 % of 10 000 tested poses.
computational problem, but practical solving methods have been developed
for 6DOF manipulators [23, 20, 7].
An important generalization of the IK problem aims at finding the opti-
mal control parameters for an under-constrained mechanism, i.e. when the
number of controlled joints in a manipulator is larger than six. Then, an
algebraic computation problem turns into an optimization problem over an
algebraic variety [4] of possible IK solutions. It is particularly convenient
to choose a polynomial objective function to arrive at a semi-algebraic opti-
mization problem [17].
Semi-algebraic optimization problems are in general non-convex but can
be solved with certified global optimality [18] using the Lasserre hierar-
chy of convex optimization problems [17]. Computationally, however, semi-
algebraic optimization problems are in general extremely hard and were of-
ten considered too expensive to be used in practice. In this paper, we show
that using “algebraic pre-processing” in semi-algebraic optimization methods
becomes practical in solving the IK problem of general 7DOF serial manip-
ulators with a polynomial objective function.
1.1 Contribution
Our main contributions are:
(1) We prove that the variety of IK solutions of all generic 7DOF revo-
lute serial manipulators can be generated by second-degree polynomials only
(Theorem 1). This considerably reduces the complexity of semi-algebraic
optimization and makes it computationally feasible.
(2) We provide a method for computing a globally optimal solution to the IK
2
problem for a general 7DOF serial manipulator with a polynomial objective
function.
(3) We demonstrate that our approach works on a practical 7DOF KUKA
LBR IIWA manipulator and allows us to solve 99 % configurations while the
straightforward semi-algebraic optimization fails in approx 34 % of cases.
(4) We employ techniques from algebraic geometry [4] and polynomial opti-
mization [18] to solve the 7DOF IK problem exactly (within the numerical ac-
curacy of computation). Our approach is also able to certify the in-feasibility
of solving when it happens.
2 Previous work
The first breakthrough in solving IK problems was the global solution to IK
for a general 6DOF serial manipulator, which was given in [25, 20]. It leads
to solving a polynomial system with 16 solutions. Another important result
was the solution to the forward kinematics problem of the Stewart-Gough
parallel manipulator platform [19] leading to a polynomial system with 40
solutions. See recent work [5] for the review of local and other approximate
techniques for solving IK problems. We next review only the most relevant
work.
2.1 The most relevant previous work
The closest previous works are related to solving IK for mechanisms, which
are under-constrained when considering positions of the final actuator only.
The standard approach is to employ additional dynamics, time optimality,
and collision constraints.
In [6], a technique for planning dynamic whole-body motion of a hu-
manoid robot has been developed. It solves IK as a part of motion planning
by local optimization methods taking into account kinematics, dynamics,
and collision model. The planning method requires good initialization to
converge, and depending on the quality of the initialization may take from
minutes to hours of running time. Our approach provides a globally optimal
solution for 7DOF kinematics subchains of more complex mechanisms and
could be used to initialize kinematic part of motion planning.
Work [15] presented IK solution for 7DOF manipulators with zero link
offsets, e.g. KUKA LBR IIWA manipulators. The solution uses special kine-
matics of its class of manipulators to decompose the general IK problem
to two simpler IK problems that can be solved in a closed-form. The one-
dimensional variety of self-motions becomes circular, and hence the paper
3
proposes to parameterize it by the angle of a point of the circle. Our ap-
proach generalizes this solution to a general 7DOF manipulator and shows
that it is feasible to solve the IK problem for completely general 7DOF ma-
nipulators and optimize over their self-motion varieties.
Paper [5] presents a global (approximate) solution to IK for 7DOF manip-
ulators. It formulates the IK problem as a mixed-integer convex optimization
program. The key idea of the paper is to approximate the non-convex space
of rotations by piecewise linear functions on several intervals that partition
the original space. This turns the original non-convex problem into an ap-
proximate convex problem when the right interval is chosen. Selecting the
values of auxiliary binary variables to pick the actual interval of approxima-
tion leads to the integer part of the optimization. This is the first practical
globally optimal approach, but it is only approximate and as such delivers
solutions with errors in units of centimeters and units of degrees. It also fails
to detect about 5 % of infeasible poses. Our approach solves the original
problem with sub-10−4 mm and sub-10−2 degree error and we can solve/de-
cide the feasibility in all but 1 % of tested cases. Computation times of [5]
and our approach are roughly similar, in units of seconds.
3 Problem formulation
Here we formulate the IK problem for the 7DOF serial manipulators as a
semi-algebraic optimization problem with a polynomial objective function.
The task is to find joint coordinates of the manipulator in a way that
the end-effector reaches the desired pose in space. The IK problem is called
under-constrained for manipulators, which have more DOF than they require
to execute the given task. In our case, to reach the desired pose in space,
manipulators require to have six DOF, and therefore the IK problem for
a 7DOF manipulator is under-constrained. The consequence is that the IK
problem has an infinite number of solutions for reachable generic end-effector
poses for such manipulators. This results in the self-motion property of
these manipulators. Self-motion is a motion of a manipulator, which is not
observed in the task space, i.e. the end-effector pose of the manipulator is
static while the links of the manipulator are moving. Therefore, moving
the manipulator along a path consisting of joint configurations of different
solutions of the IK problem for the same pose in space will result in the
self-motion of the manipulator.
The self-motion property provides the manipulator more adaptability
since it allows, e.g. to avoid more obstacles in the paths and to avoid singu-
larities, which leads to a more versatile mechanism.
4
On the other hand, increasing the degrees of freedom increases dramati-
cally the difficulty of the IK problem computation. The IK problem has no
longer a finite number of solutions. It can be formulated as a constrained op-
timization problem choosing the optimal solution from the set of all feasible
solutions.
3.1 Scope of the proposed method
In this work, we present a general method for solving the IK problem for
7DOF serial manipulators. We aim at a method that solves the IK prob-
lem, and that selects the globally optimal solution w.r.t. the given objective
function from the infinite number of all feasible solutions. It is naturally
more time consuming to find the global solution than to find any solution,
and therefore we do not expect our method to be an on-line method. For
on-line methods, such as used in the control units of the manipulators, the
local methods are more suitable as they are fast and sufficiently accurate.
We see the application of our presented method in the developing pro-
cess and the exploration of the capabilities of the manipulators. The off-line
method suits these tasks well as we are not typically limited by time. Such
a method can be used with an advantage when designing new 7DOF serial
manipulators and optimizing their parameters, such as manipulability in re-
gions of interest of the Cartesian space. We see this as a reasonable approach
as 7DOF serial manipulators are currently the most common redundant ma-
nipulators in the industry.
With regard to the presented scope, we next show how the IK problem
for 7DOF serial manipulators can be modeled as a polynomial optimization
problem (POP).
3.2 Description by forward kinematics
We describe manipulators by Denavit-Hartenberg (D-H) convention [10] to
construct D-H transformation matrices Mi(θi) ∈ R4×4 from link i to i − 1.
D-H matrices are parametrized by the joint angles θi. The product of the
D-H matrices for i from 1 to 7 gives us the transformation matrix M , which
represents the transformation from the end-effector coordinate system to the
base coordinate system
7∏
i=1
Mi(θi) =M. (1)
5
The matrix M consists of the position vector t ∈ R3 and the rotation matrix
R ∈ SO(3), which together represent the end-effector pose w.r.t. the base co-
ordinate system. When knowing the joint angles θi, easy evaluation Eqn. (1)
gives the end-effector pose in the base coordinate system.
Due to kinematics constraints, manipulators come with joint limits, i.e.
with restrictions on the joint angles θi. Typically, maximal θ
High
i and minimal
θLowi values of joint angles are given as
θLowi ≤ θi ≤ θ
High
i , i = 1, . . . , 7. (2)
3.3 Inverse kinematics problem
The forward kinematics problem is very easy to solve for serial manipulators.
On the other hand, the IK problem is much more difficult since it leads to
solving systems of polynomial equations. To solve the IK problem we set up
our desired pose of the end-effector in the form of matrix M and then solve
matrix Eqn. (1) for the joint coordinates θi. For redundant manipulators,
there is an infinite number of solutions, and therefore we introduce an objec-
tive function to select the solution on which the evaluation of the objective
function is minimal. In our case, we prefer the solutions that minimize the
weighted sum of distances of the joint angles θ = [θ1, . . . , θ7]> from their
preferred values θ̂ = [θ̂1, . . . , θ̂7]>
min
θ∈〈−π;π)7
7∑
i=1
wi
(
(θi − θ̂i) mod π
)
, (3)
where wi ≥ 0 and
∑7
i=1wi = 1. This objective function is widely used in
the literature, e.g. [22]. In practice, the preferred values θ̂ can be set to the
previous configuration of the manipulator, and then the total movement of
the actuators to reach the desired pose is minimized.
Next, we add joint limits to obtain the following optimization problem
min
θ∈〈−π;π)7
7∑
i=1
wi
(
(θi − θ̂i) mod π
)
s.t.
∏7
i=1Mi(θi) =M
θLowi ≤ θi ≤ θ
High
i (i = 1, . . . , 7)
(4)
To be able to use techniques of polynomial optimization, we need to re-
move trigonometric functions that are contained in Eqn. (1). We do that by
introducing new variables c = [c1, . . . , c7]> and s = [s1, . . . , s7]>, which rep-
resent the cosines and sines of the joint angles θ = [θ1, . . . , θ7]> respectively.
6
Then, we can rewrite Problem (4) in the new variables. In order to preserve
the structure, we need to add the trigonometric identities
qi(c, s) = c
2
i + s
2
i − 1 = 0, i = 1, . . . , 7. (5)
Matrix Eqn. (1) contains 12 trigonometric equations and can be directly
rewritten as 12 polynomial equations of degrees up to seven in the newly
introduced variables. However, we use the following clever manipulation
with the matrix multiplication, which relies on the fact that the inverse of
a rotation matrix is its transpose, i.e. it is a linear function of the original
matrices,
5∏
i=3
Mi(θi)−M−12 (θ2)M
−1
1 (θ1)MM
−1
7 (θ7)M
−1
6 (θ6) = 0. (6)
It reduces the maximal degree of the polynomials in unknowns c and s to
four. We denote these polynomials in Eqn. (6) as
pj(c, s) = 0, j = 1, . . . , 12 (7)
The next step is to change objective (3) into a polynomial in the new vari-
ables c, s. We notice that the objective function (3) is minimal on the same
solutions as the following objective function
min
c∈〈−1,1〉7, s∈〈−1,1〉7
7∑
i=1
wi
(
(ci − cos θ̂i)2 + (si − sin θ̂i)2
)
(8)
= min
c∈〈−1,1〉7, s∈〈−1,1〉7
7∑
i=1
2wi(1− ci cos θ̂i − si sin θ̂i). (9)
After rewriting the joint limits inequalities into the polynomial form, we
obtain the following polynomial optimization problem
min
c∈〈−1,1〉7, s∈〈−1,1〉7
7∑
i=1
2wi(1− ci cos θ̂i − si sin θ̂i)
s.t. pj(c, s) = 0 (j = 1, . . . , 12)
qi(c, s) = 0 (i = 1, . . . , 7)
−(ci + 1) tan
θLowi
2
+ si ≥ 0 (i = 1, . . . , 7)
(ci + 1) tan
θ
High
i
2
− si ≥ 0 (i = 1, . . . , 7)
(10)
We show how this polynomial optimization problem can be solved in the
following sections.
7
Since the presented framework is general, any objective function can be
chosen as long as it can be expressed as a low degree polynomial in sines and
cosines of the joint angles. Different objective functions will be chosen for
different tasks, but we demonstrate the presented approach with the objective
function (9).
After solving Problem (10), we recover θ from c and s by function atan2,
which takes into account signs of the arguments.
4 Polynomial optimization
Next, we describe the polynomial optimization methods we use to solve Prob-
lem (10).
Polynomial optimization problems (POPs) are generally non-convex, but
they can be solved with global optimality certificates with the help of convex
optimization, as surveyed in [18]. The idea consists of building a hierarchy of
convex optimization problems of increasing size whose values converge to the
value of the POP. The convergence proof is based on results of real algebraic
geometry, namely the representation of positive polynomials, or Positivstel-
lensatz (PSatz for short). One of the most popular Psatz is due to Putinar,
and it expresses a polynomial positive on a compact basic semialgebraic set as
a weighted sum of squares (SOS). Finding this SOS representation amounts
to solving a semidefinite programming (SDP) problem, a particular convex
optimization problem that can be solved efficiently numerically with inte-
rior point algorithms. By increasing the degree of the SOS representation,
we increase the size of the SDP problem, thereby constructing a hierarchy
of SDP problems. Dual to this polynomial positivity problem is the prob-
lem of characterizing moments of measures supported on a compact basic
semialgebraic set. This also admits an SDP formulation, called moment
relaxations, yielding a dual hierarchy, indexed by the so-called relaxation
order. The primal-dual hierarchy is called the moment-SOS hierarchy or
also the Lasserre hierarchy since it was first proposed in [17] in the context
of POP with convergence and duality proofs. When the relaxation order
increases, the Lasserre hierarchy generates a monotone sequence of super-
optimal bounds on the global optimum of a given POP, and results on the
moment problems can be used to certify exactness of a given bound, at a
finite relaxation order. In this case, it is not necessary to go further in the
hierarchy: the non-convex POP is solved at the price of solving a convex
SDP problem of a given size. A Matlab package GloptiPoly [11] has been
designed to construct the SDP problems in the hierarchy and solve them with
a general-purpose SDP solver.
8
As observed in many applications, the main limitation of the Lasserre
hierarchy (in its original form) is its poor scalability as a function of the
number of variables and degree of the POP. This is balanced by the practical
observation that, very often, global optimality is certified at the second or
third-order relaxation. As our experiments reveal, for the degree 4 POP
studied in our paper, the third order relaxation is out of reach of state-of-
the-art SDP solvers. It becomes hence critical to investigate reformulation
techniques to reduce the degree as much as possible. This is the topic of the
next section.
5 Symbolic reduction of the POP
Here we provide the description of the algebraic geometry technique we use to
reduce the degree of our POP problem to obtain a practical solving method.
See [4] for algebraic-geometric notation and concepts.
The POP we have at hand is a constrained with polynomial equations
f1 = · · · = fs = 0 (11)
of degree 4 in Q[x1, . . . , xn]. Observe that one can replace these polynomial
equations in the formulation of the POP by any other set of polynomial
equations
g1 = · · · = gt = 0 (12)
as long as both systems of equations have the same solution set. Natural
candidates for the gi’s are to pick them in the ideal generated by (f1, . . . , fs),
i.e. the set of algebraic combinations I = {
∑
i qifi | qi ∈ Q[x1, . . . , xn]}. It is
clear that if all the fi’s vanish simultaneously at a point, any polynomial g
in this set will vanish at this point.
The difficulty is how to understand the structure of this set and find a
nice finite representation of it that would allow many algebraic operations
(such as deciding whether a given polynomial lies in this set). Solutions have
been brought by symbolic computation, aka computer algebra, through the
development of algorithms computing Gröbner bases, which were introduced
by Buchberger [4]. These are finite sets, depending on a monomial order-
ing [4], which generate I as input equations do, but from which the whole
structure of I can be read.
Modern algorithms for computing Gröbner bases (F4 and F5 algorithms),
which significantly improved by several orders of magnitude the state-of-the-
art, were introduced next by J. C. Faugère [9, 8]. These latter algorithms
9
bring a linear algebra approach to Gröbner bases computations. In partic-
ular, noticing that the intersection of I with the subset of polynomials in
Q[x1, . . . , xn] of degree ≤ d is a vector space of finite dimension, is a key to
reduce Gröbner bases computations to exact linear algebra operations.
Hence, Gröbner bases provide bases of such vector spaces when one uses
monomial orderings which filter monomials w.r.t. degree first. Finally, going
back to our problem, a Gröbner basis computation allows us to discover if I
contains degree 2 polynomials (and is generated by such quadrics).
While this is never the case when starting with generic degree 4, observe
that there are many relations between the coefficients of the degree 4 equa-
tions of our POP. Hence, we are not facing a generic situation there and
we’ll see further that actually a Gröbner basis computation provides a set of
quadrics that can replace our initial set of constraints. Note also that since
Gröbner basis algorithms rely on exact linear algebra, such a property holds
for any instance of our POP if it holds for a randomly chosen one (the trace
of the computation will always be the same, giving rise to polynomials of
degree ≤ 2).
6 Solving the IK problem
In order to solve the IK problem, we need to solve the optimization problem
(10). First, we apply the implementation GloptiPoly [12] of the method
described in Section 4 directly on the Problem (10).
6.1 Direct application of polynomial solver
Since the original Problem (10) contains polynomials of degrees up to 4, we
start with the first relaxation of order two. That means we substitute each
monomial in the original 14 variables up to degree four by a new variable,
and therefore the resulting SDP program will have 3060 variables.
Solving the first relaxation typically does not yield the solution for this
parametrization of the problem, and therefore it is required to go higher in the
relaxation hierarchy. Unfortunately, relaxation order three for a polynomial
problem in 14 variables leads to an SDP problem in 38 760 variables. Such a
huge problem is still often solvable on contemporary computers, but it often
takes hours to finish.
10
6.2 Symbolic reduction
In the view of the previous paragraph, we aim at simplifying the original
polynomial problem to be able to obtain solutions even for the relaxation of
order two, which takes seconds to solve.
Here is our main result that allows us to do it. We claim that polynomials
pj and qi of degrees up to four in Problem (10) can be reduced to polynomials
of degree two.
Theorem 1. The ideal generated by the kinematics constraints (7) for a
generic serial manipulator with seven revolute joints and for generic pose M
with the addition of the trigonometric identities (5) can be generated by a
set of degree two polynomials.
Proof. The proof is computational. We generate generic instances of serial
manipulators and generic poses. Then a Gröbner basisG [3] of polynomials pj
and qi is computed for each instance of the manipulator and pose. We select
a subset S of degree two polynomials from the basis G, and by computing a
new Gröbner basis G′ from S, we verify that S generates the same ideal as
the original set of polynomials. See Maple code in Listing 1. The polynomials
pj and qi are put into the variable eq, and the last command of the code will
be evaluated to True if the bases G and G′ are equal, and therefore generate
the same ideal.
Listing 1: Maple code for the proof of Theorem 1.
1 # compute the reduced Groebner basis from pj and qi polynomials
(in variables of eq)
2 G := Basis(eq, tdeg(op(indets(eq)))):
3 # select degree two polynomials from the basis and compute a new
reduced Groebner basis
4 idxDegTwo := SearchAll(2, map(degree, G)):
5 eqPrime := G[[idxDegTwo]]:
6 GPrime := Basis(eqPrime, tdeg(op(indets(eq)))):
7 # compare the two bases
8 evalb(G = GPrime);
9 True
11
-800-600-400-200 0 200400600800-800
-600
-400
-200
0
200
400
600
800
0
100
200
300
400
500
600
700
800
900
1000
x [mm]
y [mm]
z [mm]
Figure 2: Generated poses of the manipulator. Green dots are poses marked
as feasible by direct solving with GloptiPoly, blue as infeasible, and for the
red ones the computation failed (32.4 %).
6.3 Solving the reduced polynomial optimization prob-
lem
We exploit Theorem 1 in our approach to solve the IK problem. First, we
compute a Gröbner basis of the kinematics constraints (7) and (5) from which
we select only polynomials of degree two. Then, we construct the Problem
(10) but with polynomial constraints given by the degree two polynomials
only. We solve the problem by hierarchies of semidefinite programs.
Reducing the degree of polynomials from four to two allows us to start
with SDP relaxation of order one. The size of this SDP problem, in terms of
the number of variables, is now 120. Practical experiments have shown that
the first relaxation is not tight enough to yield the solution. On the other
hand, the second relaxation gives a solution for almost all poses, see Tab. 1.
7 Experiments
We demonstrate our method on IK problem for KUKA LBR IIWA arm with
seven revolute joints. The structure of the manipulator is designed in a
special way such that the IK problem is simple to compute. One of the
12
-800-600-400-200 0 200400600800-800
-600
-400
-200
0
200
400
600
800
0
100
200
300
400
500
600
700
800
900
1000
x [mm]
y [mm]
z [mm]
Figure 3: Generated poses of the manipulator. Green dots are poses marked
as feasible by GloptiPoly after symbolic simplification, blue as infeasible, and
for the red ones the computation failed (1.2 %).
Table 1: Overview of execution times and accuracy of the presented methods.
Execution time [s] Median error % of failed
Reduction step GloptiPoly Tran. [mm] Rot. [deg] poses
Deg. 4 pol. — 21.3 3.92 · 10−4 6.11 · 10−5 32.4 %
Deg. 2 pol. 2.7 5.6 7.27 · 10−5 5.59 · 10−3 1.2 %
advantages is that for a fixed end-effector pose, the joint angle θ4 is constant
within the self-motion. This allows for a geometrical derivation of a closed-
form solution to the IK problem, such a [15], where the authors introduce
new angle parameter δ that fixes the left DOF of the IK problem.
Another approach is to solve the problem by local non-linear optimization
techniques [2], but such methods do not provide global optima, and the found
solution is highly dependent on the initial guess.
Solving the IK problem globally is more computationally challenging. To
be able to tackle the problem in a matter of seconds, relaxations of the
problem were developed in the past. Dai et al. in [5] proposed mix-integer
convex relaxation of the non-convex rotational constraints. Their method
finds all classes of solutions that are in correspondence with a different set of
active binary variables, but they are unable to select a global optima w.r.t.
an objective function.
13
100
101
102
103
104
10−6 10−5 10−4 10−3 10−2 10−1 100
Fr
eq
ue
nc
y
Pose error
Translation error [mm]
Rotation error [deg]
Figure 4: Histogram of translation and rotation error of the poses com-
puted from the forward kinematics on found solutions w.r.t. the desired poses.
There are 0 zero translation errors and 0 zero rotation errors.
7.1 Polynomial optimization problem for KUKA LBR
IIWA
We directly parameterize Problem (10) by the D-H parameters of the KUKA
LBR IIWA manipulator. We set the weights equally to wi = 17 , and we
set the preferred values of θ̂i to zero, which is in the middle of the joint
allowed interval. This leads to POP in 14 variables and with polynomials pj
of degrees up to four.
7.2 Direct application of polynomial solver
First, we solve Problem (10) directly by polynomial optimization toolbox
GloptiPoly [12] for relaxation order two with the use of MOSEK [1] as the
semidefinite problem solver.
Our dataset consists of 10 000 randomly chosen poses within and outside
of the working space of the manipulator, as shown in Fig. 2. For poses marked
by red color, GloptiPoly failed to compute the solution or report infeasibility.
That is mainly due to the small relaxation order of the semidefinite relaxation
of the POP. There is 32.4 % of such poses, which makes this approach quite
impractical. Computations for the next degree three relaxation is still often
feasible on contemporary computers but takes hours to finish.
14
7.3 POP with symbolic reduction
Since the performance of GloptiPoly highly depends on the number of vari-
ables of the POP and the relaxation degree, which grows with the degrees of
the polynomials contained in the POP, we first symbolically reduce polyno-
mials pj and qi and then solve the resulting POP by GloptiPoly.
Firstly, we take advantage of the simplified structure of the KUKA LBR
IIWA manipulator, i.e. that the joint angle θ4 is constant within the self-
motion, and therefore it plays no role in the objective function (3). That
allows us to eliminate the variables c4 and s4 from the equations. Secondly,
we reduce the polynomials pj and qj symbolically with the use of Theorem 1.
In this way, we have reduced the number of variables from 14 to 12, and
we have reduced the degrees of the polynomials to two, which significantly
speeds up the SDP solver. Practical experiments showed that GloptiPoly is
now able to compute IK for more poses with the same relaxation order two
than by the naïve approach used before, see Fig. 3. Now only 1.2 % of poses
failed to be solved on the same dataset as in Section 7.2.
To verify the numerical stability of the solver, we have computed the
forward kinematics problem based on the found joint angles from the IK
problem. Then, we have computed the translation error and rotation error
of this pose w.r.t. the desired pose. The histogram of the translation and
rotation error can be seen in Fig. 4.
For practical applications, the execution time of this method is impor-
tant. In Fig. 5, we show histograms of the execution time of the on-line
phase of GloptiPoly as well as of the symbolic reduction of the initial poly-
nomials to degree two polynomials. We observe that our execution times are
comparable to computation times in [5] when using off-the-shelf POP and
GB computation tools. We next plan to develop optimized solvers leading
to considerable speedup, as it was done in solving polynomial systems in
computer vision [16].
8 Conclusions
We presented a practical method for globally solving the 7DOF IK prob-
lem with a polynomial objective function. Our solution is accurate and
can solve/decide infeasibility in 99 % cases out of 10 000 cases tested on
the KUKA LBR IIWA manipulator. The code is open-sourced at https:
//github.com/PavelTrutman/Global-7DOF-IKT.
For future work, we consider two interesting directions. First, it is desir-
able to return a certificate of infeasibility when POP constraints are incom-
15
https://github.com/PavelTrutman/Global-7DOF-IKT
https://github.com/PavelTrutman/Global-7DOF-IKT
100
101
102
103
104
105
2 4 6 8 10 12 14
Fr
eq
ue
nc
y
GloptiPoly execution time [s]
2 2.2 2.4 2.6 2.8 3
Maple execution time [s]
Feasible poses
Infeasible poses
Poses failed to compute
Figure 5: Histograms of execution time. Left: execution time of the on-line
phase of GloptiPoly. Right: execution time of the symbolic reduction and
elimination in Maple.
patible, e.g., by computing a SOS representation for the polynomial -1 on
the quadratic module corresponding to the feasible set [14]. Secondly, it is
interesting to exploit the structure of our POP to prove the exactness of the
observed second SDP relaxation in the moment-SOS hierarchy.
Acknowledgments
P. Trutman was supported by the EU Structural and Investment Funds, Op-
erational Programe Research, Development and Education under the project
IMPACT (reg. no. CZ.02.1.01/0.0/0.0/15_003/0000468) and Grant Agency
of the CTU Prague project SGS19/173/OHK3/3T/13. T. Pajdla was sup-
ported by EU Structural and Investment Funds, Operational Programe Re-
search, Development and Education under the project The Robotics for In-
dustry 4.0 project (reg. no. CZ.02.1.01/0.0/0.0/15_003/0000470, the EU
H2020 ARtwin No. 856994, and EU H2020 SPRING No. 871245 Projects.
Didier Henrion and Mohab Safey El Din are supported by the European
Union’s Horizon2020 research and innovation programme under the Marie
Skłodowska-Curie grant agreement N°813211 (POEMA). Mohab Safey El
Din is supported by the ANR grants ANR-18-CE33-0011 Sesame, ANR-19-
CE40-0018 De Rerum Natura, ANR-19-CE48-0015 ECARP and the CAMiSAdo
PGMO project.
16
References
[1] MOSEK ApS. The MOSEK optimization toolbox for MATLAB manual.
Version 8.0., 2016.
[2] Samuel R Buss. Introduction to inverse kinematics with jacobian trans-
pose, pseudoinverse and damped least squares methods. IEEE Journal
of Robotics and Automation, 17(1-19):16, 2004.
[3] David Cox, John Little, and Donal OShea. Ideals, varieties, and algo-
rithms: an introduction to computational algebraic geometry and com-
mutative algebra. Springer Science & Business Media, 2013.
[4] David A. Cox, John Little, and Donald O’Shea. Ideals, Varieties, and
Algorithms: An Introduction to Computational Algebraic Geometry and
Commutative Algebra. Springer, 2015.
[5] Hongkai Dai, Gregory Izatt, and Russ Tedrake. Global inverse kinemat-
ics via mixed-integer convex optimization. The International Journal of
Robotics Research, page 0278364919846512, 2017.
[6] Hongkai Dai, Andrés Valenzuela, and Russ Tedrake. Whole-body mo-
tion planning with centroidal dynamics and full kinematics. In 2014
IEEE-RAS International Conference on Humanoid Robots, pages 295–
302. IEEE, 2014.
[7] Rosen Diankov. Automated Construction of Robotic Manipulation Pro-
grams. PhD thesis, Pittsburgh, PA, USA, 2010. AAI3448143.
[8] Jean Charles Faugère. A new efficient algorithm for computing grÖbner
bases without reduction to zero (f5). In Proceedings of the 2002 Interna-
tional Symposium on Symbolic and Algebraic Computation, ISSAC ’02,
pages 75–83, New York, NY, USA, 2002. ACM.
[9] Jean-Charles Faugére. A new efficient algorithm for computing gröbner
bases (f4). Journal of Pure and Applied Algebra, 139(1):61 – 88, 1999.
[10] Richard S Hartenberg and Jacques Denavit. A kinematic notation for
lower pair mechanisms based on matrices. Journal of applied mechanics,
77(2):215–221, 1955.
[11] Didier Henrion and Jean-Bernard Lasserre. Gloptipoly: Global opti-
mization over polynomials with matlab and sedumi. ACM Transactions
on Mathematical Software (TOMS), 29(2):165–194, 2003.
17
[12] Didier Henrion, Jean-Bernard Lasserre, and Johan Löfberg. Gloptipoly
3: moments, optimization and semidefinite programming. Optimization
Methods & Software, 24(4-5):761–779, 2009.
[13] Reza Jazar. Theory of Applied Robotics: Kinematics, Dynamics, and
Control. Springer, 2007.
[14] Igor Klep and Markus Schweighofer. An exact duality theory for semidef-
inite programming based on sums of squares. Mathematics of Operations
Research, 38(3):569–590, 2013.
[15] I Kuhlemann, A Schweikard, P Jauer, and F Ernst. Robust inverse
kinematics by configuration control for redundant manipulators with
seven dof. In 2016 2nd International Conference on Control, Automation
and Robotics (ICCAR), pages 49–55. IEEE, 2016.
[16] Viktor Larsson, Magnus Oskarsson, Kalle Åström, Alge Wallis, Zuzana
Kukelova, and Tomás Pajdla. Beyond grobner bases: Basis selection
for minimal solvers. In 2018 IEEE Conference on Computer Vision
and Pattern Recognition, CVPR 2018, Salt Lake City, UT, USA, June
18-22, 2018, pages 3945–3954, 2018.
[17] Jean Bernard Lasserre. Global optimization with polynomials and the
problem of moments. SIAM Journal on optimization, 11(3):796–817,
2001.
[18] Jean Bernard Lasserre. An introduction to polynomial and semi-
algebraic optimization, volume 52. Cambridge University Press, 2015.
[19] Daniel Lazard. Generalized stewart platform: How to compute with
rigid motions. 1993.
[20] Dinesh Manocha and John F. Canny. Efficient inverse kinematics
for general 6r manipulators. IEEE Trans. Robotics and Automation,
10(5):648–657, 1994.
[21] Ernst W Mayr and Albert R Meyer. The complexity of the word prob-
lems for commutative semigroups and polynomial ideals. Advances in
Mathematics, 46(3):305 – 329, 1982.
[22] Ugo Pattacini, Francesco Nori, Lorenzo Natale, Giorgio Metta, and
Giulio Sandini. An experimental evaluation of a novel minimum-jerk
cartesian controller for humanoid robots. In 2010 IEEE/RSJ interna-
tional conference on intelligent robots and systems, pages 1668–1674.
IEEE, 2010.
18
[23] Manasa Raghavan and Bernard Roth. Inverse kinematics of the general
6r manipulator and related linkages. 1993.
[24] Manasa Raghavan and Bernard Roth. Solving polynomial systems for
the kinematic analysis and synthesis of mechanisms and robot manipu-
lators. 1995.
[25] Madhusudan Raghaven and Bernard Roth. Kinematic analysis of the 6r
manipulator of general geometry. In The Fifth International Symposium
on Robotics Research, pages 263–269, Cambridge, MA, USA, 1990. MIT
Press.
[26] J.E. Shigley and J.J. Uicker. Theory of machines and mechanisms.
McGraw-Hill series in mechanical engineering. McGraw-Hill, 1980.
[27] Charles W. Wampler, Alexander P. Morgan, and Andrew J. Sommese.
Numerical continuation methods for solving polynomial systems arising
in kinematics. 1990.
19
	1 Introduction
	1.1 Contribution
	2 Previous work
	2.1 The most relevant previous work
	3 Problem formulation
	3.1 Scope of the proposed method
	3.2 Description by forward kinematics
	3.3 Inverse kinematics problem
	4 Polynomial optimization
	5 Symbolic reduction of the POP
	6 Solving the IK problem
	6.1 Direct application of polynomial solver
	6.2 Symbolic reduction
	6.3 Solving the reduced polynomial optimization problem
	7 Experiments
	7.1 Polynomial optimization problem for KUKA LBR IIWA
	7.2 Direct application of polynomial solver
	7.3 POP with symbolic reduction
	8 Conclusions